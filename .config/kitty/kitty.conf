# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

font_family      Hermit 
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size 10.5

# : }}}

#: Text cursor customization {{{

cursor #ffffff

#: Default text cursor color. If set to the special value none the
#: cursor will be rendered with a "reverse video" effect. Its color
#: will be the color of the text in the cell it is over and the text
#: will be rendered with the background color of the cell. Note that
#: if the program running in the terminal sets a cursor color, this
#: takes precedence. Also, the cursor colors are modified if the cell
#: background and foreground colors have very low contrast. Note that
#: some themes set this value, so if you want to override it, place
#: your value after the lines where the theme file is included.

# cursor_text_color #111111

#: The color of text under the cursor. If you want it rendered with
#: the background color of the cell underneath instead, use the
#: special keyword: `background`. Note that if cursor is set to none
#: then this option is ignored. Note that some themes set this value,
#: so if you want to override it, place your value after the lines
#: where the theme file is included.

cursor_shape beam
cursor_shape_unfocused hollow
# cursor_beam_thickness 1.5
# cursor_blink_interval -1
# cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{

# scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_indicator_opacity 1.0

#: The opacity of the scrollback indicator which is a small colored
#: rectangle that moves along the right hand side of the window as you
#: scroll, indicating what fraction you have scrolled. The default is
#: one which means fully opaque, aka visible. Set to a value between
#: zero and one to make the indicator less visible.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

# scrollback_pager_history_size 0

#: Separate scrollback history size (in MB), used only for browsing
#: the scrollback buffer with pager. This separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. The
#: current implementation stores the data in UTF-8, so approximately
#: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_fill_enlarged_window no

#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

# wheel_scroll_multiplier 5.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.

# touch_scroll_multiplier 1.0

#: Multiplier for the number of lines scrolled by a touchpad. Note
#: that this is only used for high precision scrolling devices on
#: platforms such as macOS and Wayland. Use negative numbers to change
#: scroll direction.

#: }}}

#: Performance tuning {{{

# repaint_delay 10

#: Delay between screen updates (in milliseconds). Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS, you have to
#: either set sync_to_monitor to no or use a monitor with a high
#: refresh rate. Also, to minimize latency when there is pending input
#: to be processed, this option is ignored.

# input_delay 3

#: Delay before input from the program running in the terminal is
#: processed (in milliseconds). Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.
#: This setting is ignored when the input buffer is almost full.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents screen tearing
#: <https://en.wikipedia.org/wiki/Screen_tearing> when scrolling.
#: However, it limits the rendering speed to the refresh rate of your
#: monitor. With a very high speed mouse/high keyboard repeat rate,
#: you may notice some slight input latency. If so, set this to no.

#: }}}

#: Terminal bell {{{

enable_audio_bell yes

#: }}}

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

#: If enabled, the OS Window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the OS Window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

# remember_window_position no

#: If enabled, the OS Window position will be remembered so that new
#: instances of kitty will have the same position as the previous
#: instance. If disabled, the OS Window will be placed by the window
#: manager. Note that remembering of position only works if the
#: underlying desktop environment/window manager supports it. It never
#: works on Wayland. See also kitty --position to specify the position
#: when launching kitty.

# enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. The cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.

# window_border_width 0.5pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified, the unit is assumed
#: to be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

# draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: borders that separate the window from a neighbor are drawn. Note
#: that setting a non-zero window_margin_width overrides this and
#: causes all borders to be drawn.

# window_margin_width 0

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.

# single_window_margin_width -1

#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

window_padding_width 2

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

# single_window_padding_width -1

#: The window padding to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_padding_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

# placement_strategy center

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be
#: only at the bottom and right edges. The value can be one of: top-
#: left, top, top-right, left, center, right, bottom-left, bottom,
#: bottom-right.

# active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: The color for the border of inactive windows.

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred.

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# hide_window_decorations no

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only and titlebar-and-corners can be used
#: to only hide the titlebar and the rounded corners. Whether this
#: works and exactly what effect it has depends on the window
#: manager/operating system. Note that the effects of changing this
#: option when reloading config are undefined. When using titlebar-
#: only, it is useful to also set window_margin_width and
#: placement_strategy to prevent the rounded corners from clipping
#: text. Or use titlebar-and-corners.

# window_logo_path none

#: Path to a logo image. Must be in PNG/JPEG/WEBP/GIF/TIFF/BMP format.
#: Relative paths are interpreted relative to the kitty config
#: directory. The logo is displayed in a corner of every kitty window.
#: The position is controlled by window_logo_position. Individual
#: windows can be configured to have different logos either using the
#: launch action or the remote control
#: <https://sw.kovidgoyal.net/kitty/remote-control/> facility.

# window_logo_position bottom-right

#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

# window_logo_alpha 0.5

#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.

# window_logo_scale 0

#: The percentage (0-100] of the window size to which the logo should
#: scale. Using a single number means the logo is scaled to that
#: percentage of the shortest window dimension, while preserving
#: aspect ratio of the logo image.

#: Using two numbers means the width and height of the logo are scaled
#: to the respective percentage of the window's width and height.

#: Using zero as the percentage disables scaling in that dimension. A
#: single zero (the default) disables all scaling of the window logo.

# resize_debounce_time 0.1 0.5

#: The time to wait (in seconds) before asking the program running in
#: kitty to resize and redraw the screen during a live resize of the
#: OS window, when no new resize events have been received, i.e. when
#: resizing is either paused or finished. On platforms such as macOS,
#: where the operating system sends events corresponding to the start
#: and end of a live resize, the second number is used for redraw-
#: after-pause since kitty can distinguish between a pause and end of
#: resizing. On such systems the first number is ignored and redraw is
#: immediate after end of resize. On other systems only the first
#: number is used so that kitty is "ready" quickly after the end of
#: resizing, while not also continuously redrawing, to save energy.

# resize_in_steps no

#: Resize the OS window in steps as large as the cells, instead of
#: with the usual pixel accuracy. Combined with initial_window_width
#: and initial_window_height in number of cells, this option can be
#: used to keep the margins as small as possible when resizing the OS
#: window. Note that this does not currently work on Wayland.

# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set 0-9A-Z\-=[];',./\\`. Specify your
#: preference as a string of characters.

# confirm_os_window_close -1

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. You can also have
#: backgrounded jobs prevent closing, by adding count-background to
#: the setting, for example: -1 count-background. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: The edge to show the tab bar on, top or bottom.

# tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts).

# tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

# tab_bar_style fade

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create
#:     a mapping for the select_tab action which presents you with a list of
#:     tabs and allows for easy switching to a tab.

# tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

# tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown.

# tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_powerline_style angled

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

# tab_activity_symbol none

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

# tab_title_max_length 0

#: The maximum number of cells that can be used to render the text in
#: a tab. A value of zero means that no limit is applied.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{tab.last_focused_progress_percent}{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use tab.active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     tab.active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.
#: keyboard_mode
#:     The name of the current keyboard mode <https://sw.kovidgoyal.net/kitty/mapping/#modal-mappings> or the empty string if no keyboard mode is active.
#: tab.last_focused_progress_percent
#:     If a command running in a window reports the progress for a task, show this progress as a percentage
#:     from the most recently focused window in the tab. Empty string if no progress is reported.
#: tab.progress_percent
#:     If a command running in a window reports the progress for a task, show this progress as a percentage
#:     from all windows in the tab, averaged. Empty string is no progress is reported.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: The 256 eight terminal colors can be used as `fmt.fg.color0`
#: through `fmt.fg.color255`. Note that for backward compatibility, if
#: {bell_symbol} or {activity_symbol} are not present in the template,
#: they are prepended to it.

# active_tab_title_template none

#: Template to use for active tabs. If not specified falls back to
#: tab_title_template.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles.

# tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

# tab_bar_margin_color none

#: Color for the tab bar margin area. Defaults to using the terminal
#: background color for margins above and below the tab bar. For side
#: margins the default color is chosen to match the background color
#: of the neighboring tab.

#: }}}

#: Color scheme {{{

foreground #ebdbb2
background #282828

selection_foreground #282828
selection_background #ebdbb2

#: The color table {{{

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

#: black
color0 #282828
color8 #928374

#: red
color1  #cc241d
color9 #fb4934

#: green
color2  #98971a
color10 #b8bb26

#: yellow
color3  #d79921
color11 #fabd2f

#: blue
color4  #458588
color12 #83a598

#: magenta
color5  #b16286
color13 #d3869b

#: cyan
color6  #689d6a
color14 #8ec07c

color7  #a89984
color15 #ebdbb2

#: }}}

